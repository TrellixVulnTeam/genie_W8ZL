# for methods 1, 2 ,3
cv_errors_1 <- rep(0, n)
cv_errors_2 <- rep(0, n)
cv_errors_3 <- rep(0, n)
for (i in 1:n) {
m1 <- lm(CO ~ NIC, data = cig07[-i,])
cv_errors_1[i] <- (predict(m1, cig07[i,])) - cig07$CO[i]
m2 <- lm(CO ~ log(NIC), data = cig07[-i,])
cv_errors_2[i] <- (predict(m2, cig07[i,])) - cig07$CO[i]
m3 <- lm(CO ~ sqrt(NIC), data = cig07[-i,])
cv_errors_3[i] <- (predict(m3, cig07[i,])) - cig07$CO[i]
}
mse_m1 <- mean(cv_errors_1 ^ 2)
mse_m2 <- mean(cv_errors_2 ^ 2)
mse_m3 <- mean(cv_errors_3 ^ 2)
cat("method 1 test mse: ", mse_m1, "\n",
"method 2 test mse: ", mse_m2, "\n",
"method 3 test mse: ", mse_m3, "\n",
"** processing time: ", proc.time() - start)
proc.time()
?proc.time
start
proc.time()[3]
proc.time()[2,3]
proc.time()[2][3]
start = proc.time()[3]
# for methods 1, 2 ,3
cv_errors_1 <- rep(0, n)
cv_errors_2 <- rep(0, n)
cv_errors_3 <- rep(0, n)
for (i in 1:n) {
m1 <- lm(CO ~ NIC, data = cig07[-i,])
cv_errors_1[i] <- (predict(m1, cig07[i,])) - cig07$CO[i]
m2 <- lm(CO ~ log(NIC), data = cig07[-i,])
cv_errors_2[i] <- (predict(m2, cig07[i,])) - cig07$CO[i]
m3 <- lm(CO ~ sqrt(NIC), data = cig07[-i,])
cv_errors_3[i] <- (predict(m3, cig07[i,])) - cig07$CO[i]
}
mse_m1 <- mean(cv_errors_1 ^ 2)
mse_m2 <- mean(cv_errors_2 ^ 2)
mse_m3 <- mean(cv_errors_3 ^ 2)
cat("method 1 test mse: ", mse_m1,
"\nmethod 2 test mse: ", mse_m2,
"\nmethod 3 test mse: ", mse_m3,
"\n\n** processing time: ", proc.time()[3] - start)
start = proc.time()[3]
set.seed(125)
# errors for methods 1, 2 3
cv_errors_1 <- rep(0, 10)
cv_errors_2 <- rep(0, 10)
cv_errors_3 <- rep(0, 10)
cig <- cig07[sample(nrow(cig07)),]
folds <- cut(seq(1, nrow(cig)), breaks = 10, labels = FALSE)
for (i in 1:10) {
# segment data
test_indexes <- which(folds == i, arr.ind = TRUE)
test <- cig[test_indexes, ]
train <- cig[-test_indexes, ]
# method 1, 2, 3
m1 <- lm(CO ~ NIC, data = train)
m2 <- lm(CO ~ log(NIC), data = train)
m3 <- lm(CO ~ sqrt(NIC), data = train)
fold_errors_1 <- rep(0, nrow(train))
fold_errors_2 <- rep(0, nrow(train))
fold_errors_3 <- rep(0, nrow(train))
for (j in 1:nrow(train)) {
fold_errors_1[j] <- (predict(m1, cig[j,])) - cig$CO[j]
fold_errors_2[j] <- (predict(m2, cig[j,])) - cig$CO[j]
fold_errors_3[j] <- (predict(m3, cig[j,])) - cig$CO[j]
}
cv_errors_1[i] <- mean(fold_errors_1 ^ 2)
cv_errors_2[i] <- mean(fold_errors_2 ^ 2)
cv_errors_3[i] <- mean(fold_errors_3 ^ 2)
}
# MSEs for methods 1, 2, 3
mse_m1 <- mean(cv_errors_1)
mse_m2 <- mean(cv_errors_2)
mse_m3 <- mean(cv_errors_3)
cat("method 1 test mse: ", mse_m1,
"\nmethod 2 test mse: ", mse_m2,
"\nmethod 3 test mse: ", mse_m3,
"\n** processing time: ", proc.time()[3] - start)
start = proc.time()[3]
set.seed(125)
# errors for methods 1, 2 3
cv_errors_1 <- rep(0, 10)
cv_errors_2 <- rep(0, 10)
cv_errors_3 <- rep(0, 10)
cig <- cig07[sample(nrow(cig07)),]
folds <- cut(seq(1, nrow(cig)), breaks = 10, labels = FALSE)
for (i in 1:10) {
# segment data
test_indexes <- which(folds == i, arr.ind = TRUE)
test <- cig[test_indexes, ]
train <- cig[-test_indexes, ]
# method 1, 2, 3
m1 <- lm(CO ~ NIC, data = train)
m2 <- lm(CO ~ log(NIC), data = train)
m3 <- lm(CO ~ sqrt(NIC), data = train)
fold_errors_1 <- rep(0, nrow(train))
fold_errors_2 <- rep(0, nrow(train))
fold_errors_3 <- rep(0, nrow(train))
#for (j in 1:nrow(train)) {
# fold_errors_1[j] <- (predict(m1, cig[j,])) - cig$CO[j]
#fold_errors_2[j] <- (predict(m2, cig[j,])) - cig$CO[j]
#fold_errors_3[j] <- (predict(m3, cig[j,])) - cig$CO[j]
#  }
for (j in 1:nrow(test)) {
fold_errors_1[j] <- (predict(m1, test[j,])) - test$CO[j]
fold_errors_2[j] <- (predict(m2, test[j,])) - test$CO[j]
fold_errors_3[j] <- (predict(m3, test[j,])) - test$CO[j]
}
cv_errors_1[i] <- mean(fold_errors_1 ^ 2)
cv_errors_2[i] <- mean(fold_errors_2 ^ 2)
cv_errors_3[i] <- mean(fold_errors_3 ^ 2)
#cv_errors_1[i] <- mean(((predict(m1, cig[j,])) - cig$CO[j]) ^ 2)
}
# MSEs for methods 1, 2, 3
mse_m1 <- mean(cv_errors_1)
mse_m2 <- mean(cv_errors_2)
mse_m3 <- mean(cv_errors_3)
cat("method 1 test mse: ", mse_m1,
"\nmethod 2 test mse: ", mse_m2,
"\nmethod 3 test mse: ", mse_m3,
"\n** processing time: ", proc.time()[3] - start)
start = proc.time()[3]
set.seed(125)
# errors for methods 1, 2 3
cv_errors_1 <- rep(0, 10)
cv_errors_2 <- rep(0, 10)
cv_errors_3 <- rep(0, 10)
cig <- cig07[sample(nrow(cig07)),]
folds <- cut(seq(1, nrow(cig)), breaks = 10, labels = FALSE)
for (i in 1:10) {
# segment data
test_indexes <- which(folds == i, arr.ind = TRUE)
test <- cig[test_indexes, ]
train <- cig[-test_indexes, ]
# method 1, 2, 3
m1 <- lm(CO ~ NIC, data = train)
m2 <- lm(CO ~ log(NIC), data = train)
m3 <- lm(CO ~ sqrt(NIC), data = train)
fold_errors_1 <- rep(0, nrow(test))
fold_errors_2 <- rep(0, nrow(test))
fold_errors_3 <- rep(0, nrow(test))
#for (j in 1:nrow(train)) {
# fold_errors_1[j] <- (predict(m1, cig[j,])) - cig$CO[j]
#fold_errors_2[j] <- (predict(m2, cig[j,])) - cig$CO[j]
#fold_errors_3[j] <- (predict(m3, cig[j,])) - cig$CO[j]
#  }
for (j in 1:nrow(test)) {
fold_errors_1[j] <- (predict(m1, test[j,])) - test$CO[j]
fold_errors_2[j] <- (predict(m2, test[j,])) - test$CO[j]
fold_errors_3[j] <- (predict(m3, test[j,])) - test$CO[j]
}
cv_errors_1[i] <- mean(fold_errors_1 ^ 2)
cv_errors_2[i] <- mean(fold_errors_2 ^ 2)
cv_errors_3[i] <- mean(fold_errors_3 ^ 2)
#cv_errors_1[i] <- mean(((predict(m1, cig[j,])) - cig$CO[j]) ^ 2)
}
# MSEs for methods 1, 2, 3
mse_m1 <- mean(cv_errors_1)
mse_m2 <- mean(cv_errors_2)
mse_m3 <- mean(cv_errors_3)
cat("method 1 test mse: ", mse_m1,
"\nmethod 2 test mse: ", mse_m2,
"\nmethod 3 test mse: ", mse_m3,
"\n** processing time: ", proc.time()[3] - start)
summary(m1)
summary(m3)
?sample
install.packages("boot")
library(boot)
library(boot)
set.seed(125)
# function to obtain regression weights
bs <- function(formula, data, indices) {
d <- data[indices,] # allows boot to select sample
fit <- lm(formula, data = d)
return(coef(fit))
}
# bootstrapping with 1000 replications
results <- boot(data = cig07, statistic = bs, R = 1000, formula = CO ~ sqrt(NIC))
# view results
results
boot = rep(NA, 1000)
for (i in 1:1000) {
temp = sample(cig07, size = nrow(cig07), replace = TRUE)
boot[i] = coef(lm(CO ~ sqrt(NIC), data = cig07))
}
library(boot)
set.seed(125)
# function to obtain regression weights
bs <- function(formula, data, indices) {
d <- data[indices,] # allows boot to select sample
fit <- lm(formula, data = d)
return(coef(fit))
}
# bootstrapping with 1000 replications
results <- boot(data = cig07, statistic = bs, R = 1000, formula = CO ~ sqrt(NIC))
results
results[,3]
dim(results)
results
for (i in 1:nrow(cig07)) {
se <- (predict(m3, cig07[i, ]) - cig07$CO[i]) ^ 2
}
sqrt(se/999)
for (i in 1:nrow(cig07)) {
se <- se + (predict(m3, cig07[i, ]) - cig07$CO[i]) ^ 2
m <- m + coef(lm(CO ~ sqrt(NIC), data = cig07))
}
se <- 0
m <- 0
for (i in 1:nrow(cig07)) {
se <- se + (predict(m3, cig07[i, ]) - cig07$CO[i]) ^ 2
m <- m + coef(lm(CO ~ sqrt(NIC), data = cig07))
}
sqrt(se/999)
sqrt(m / 999)
se <- 0
m <- 0
for (i in 1:nrow(cig07)) {
se <- se + (predict(m3, cig07[i, ]) - cig07$CO[i]) ^ 2
m <- m + coef(lm(CO ~ sqrt(NIC), data = cig07))[i]
}
sqrt(se/999)
sqrt(m / 999)
?se
?sd
sd(cig07)/999
sqrt(sd(cig07)/999)
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
c$PRIMARY_RACE <- recode(c$PRIMARY_RACE, Asian = 0, Black = 1, Native American = 2, Undefined = 3, Unknown = 4, White = 5)
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
cancer <- read.csv("C:/Users/kauls15/Desktop/github/genie/data/derived/data_clinical_patient.txt", stringsAsFactors = FALSE, sep = "\t")
cancer <- cancer[-c(1,2,3),]
colnames(cancer) = cancer[1, ] # the first row will be the header
cancer <- cancer[-1, -5]
head(cancer)
sample <- read.csv("C:/Users/kauls15/Desktop/github/genie/data/derived/data_clinical_sample.txt", stringsAsFactors = FALSE, sep = "\t")
sample$AGE_AT_SEQ_REPORT[sample$AGE_AT_SEQ_REPORT == '<18'] <- 17
sample$AGE_AT_SEQ_REPORT[sample$AGE_AT_SEQ_REPORT == '>89'] <- 90
head(sample)
c <- cancer
# sort(unique(df$SEX))
c$SEX <- recode(c$SEX, Female = 0, Male = 1, Unknown = 2)
c$PRIMARY_RACE <- recode(c$PRIMARY_RACE, Asian = 0, Black = 1, "Native American" = 2, Undefined = 3, Unknown = 4, White = 5)
c$ETHNICITY <- recode(c$ETHNICITY, "Non-Spanish/non-Hispanic" = 0, "Spanish/Hispanic" = 1, Unknown = 2)
head(c)
s <- sample
s <- s[, c(-3,-6)]
s$SAMPLE_TYPE <- recode(s$SAMPLE_TYPE, Metastasis = 0, Other = 1, Primary = 2, Unspecified = 3)
head(s)
c$PRIMARY_RACE <- dplyr::recode(c$PRIMARY_RACE, Asian = 0, Black = 1, "Native American" = 2, Undefined = 3, Unknown = 4, White = 5)
c$PRIMARY_RACE <- recode(c$PRIMARY_RACE, Asian = 0, Black = 1, "Native American" = 2, Undefined = 3, Unknown = 4, White = 5)
head(c)
c <- cancer
head(c)
c$SEX <- recode(c$SEX, Female = 0, Male = 1, Unknown = 2)
sort(unique(c$PRIMARY_RACE))
c$PRIMARY_RACE <- recode(c$PRIMARY_RACE, Asian = 0, Black = 1, "Native American" = 2, Other = 3, Undefined = 4, Unknown = 5, White = 6)
c$ETHNICITY <- recode(c$ETHNICITY, "Non-Spanish/non-Hispanic" = 0, "Spanish/Hispanic" = 1, Unknown = 2)
head(c)
s <- sample
s <- s[, c(-3,-6)]
s$SAMPLE_TYPE <- recode(s$SAMPLE_TYPE, Metastasis = 0, Other = 1, Primary = 2, Unspecified = 3)
head(s)
sort(unique(s$CANCER_TYPE))
head(c)
temp <- merge(c, s, by="PATIENT_ID")
dim(c)
dim(s)
dim(temp)
View(temp)
View(c); View(s)
write.table(temp, "C:/Users/kauls15/Desktop/github/genie/data/derived/data_clinical_patient_and_sample.txt", sep="\t")
head(temp)
cbind(temp, temp[,7])
cbind(temp, temp[,7])
cbind(temp, temp[,6])
t <- temp
t[, 8] <- t[,6]
head(t)
temp <- merge(c, s, by="PATIENT_ID")
d <- temp
View(temp)
names(d)
names(d) <- c("patient_id", "sex", "primary_race", "ethnicity","age", "metastis", "cancer_type")
names(d)
d[,8] = d[6]
d <- d[,-6]
names(d) <- c("patient_id", "sex", "primary_race", "ethnicity","age", "cancer_type", "metastasis")
View(d)
plot(metastasis ~ age, data = d, xlab = "age", ylab = "metastasis")
boxplot(metastasis ~ age, data = d, xlab = "age", ylab = "metastasis")
boxplot(age ~ metastasis, data = d, xlab = "metastasis", ylab = "age")
names(d)
m1 = lm(metastasis ~ sex + primary_race + ethnicity + age + cancer_type, data = d)
summary(m1)
mse(m1)
library(ISLR)
mse(m1)
?mse
??mse
mse <- function(sm) mean(sm$residuals^2)
mse(m1)
set.seed(125)
cv_errors <- rep(0, 10)
df <- d[sample(nrow(d)),]
folds <- cut(seq(1, nrow(df)), breaks = 10, labels = FALSE)
for (i in 1:10) {
# segment data
test_indexes <- which(folds == i, arr.ind = TRUE)
test <- df[test_indexes, ]
train <- df[-test_indexes, ]
# method 1, 2, 3
m1 = lm(metastasis ~ sex + primary_race + ethnicity + age + cancer_type, data = train)
fold_errors <- rep(0, nrow(test))
for (j in 1:nrow(test)) {
fold_errors[j] <- (predict(m1, test[j,])) - test$CO[j]
}
cv_errors[i] <- mean(fold_errors_1 ^ 2)
}
set.seed(125)
cv_errors <- rep(0, 10)
df <- d[sample(nrow(d)),]
folds <- cut(seq(1, nrow(df)), breaks = 10, labels = FALSE)
for (i in 1:10) {
# segment data
test_indexes <- which(folds == i, arr.ind = TRUE)
test <- df[test_indexes, ]
train <- df[-test_indexes, ]
# method 1, 2, 3
m1 = lm(metastasis ~ sex + primary_race + ethnicity + age + cancer_type, data = train)
fold_errors <- rep(0, nrow(test))
for (j in 1:nrow(test)) {
fold_errors[j] <- (predict(m1, test[j,])) - test$metastasis[j]
}
cv_errors[i] <- mean(fold_errors ^ 2)
}
levels(d$cancer_type)
levels(d)
levels(df.kernel())
levels(df)
View(train)
df$cancer_type
summary(levels$cancer_type)
summary(df$cancer_type)
summary(train$cancer_type)
summary(test$cancer_type)
set.seed(125)
cv_errors <- rep(0, 10)
df <- d[sample(nrow(d)),]
folds <- cut(seq(1, nrow(df)), breaks = 10, labels = FALSE)
for (i in 1:10) {
# segment data
test_indexes <- which(folds == i, arr.ind = TRUE)
test <- df[test_indexes, ]
train <- df[-test_indexes, ]
# method 1, 2, 3
m1 = lm(metastasis ~ sex + primary_race + ethnicity + age + cancer_type, data = train)
fold_errors <- rep(0, nrow(test))
test[!complete.cases(test),] test <- na.omit(test)
set.seed(125)
cv_errors <- rep(0, 10)
df <- d[sample(nrow(d)),]
folds <- cut(seq(1, nrow(df)), breaks = 10, labels = FALSE)
for (i in 1:10) {
# segment data
test_indexes <- which(folds == i, arr.ind = TRUE)
test <- df[test_indexes, ]
train <- df[-test_indexes, ]
# method 1, 2, 3
m1 = lm(metastasis ~ sex + primary_race + ethnicity + age + cancer_type, data = train)
fold_errors <- rep(0, nrow(test))
test[!complete.cases(test),]
test <- na.omit(test)
for (j in 1:nrow(test)) {
fold_errors[j] <- (predict(m1, test[j,])) - test$metastasis[j]
}
cv_errors[i] <- mean(fold_errors ^ 2)
}
View(train)
View(test)
set.seed(125)
cv_errors <- rep(0, 10)
df <- d[sample(nrow(d)),]
folds <- cut(seq(1, nrow(df)), breaks = 10, labels = FALSE)
for (i in 1:10) {
# segment data
test_indexes <- which(folds == i, arr.ind = TRUE)
test <- df[test_indexes, ]
train <- df[-test_indexes, ]
# method 1, 2, 3
m1 = lm(metastasis ~ sex + primary_race + ethnicity + age + cancer_type, data = train)
fold_errors <- rep(0, nrow(test))
test <- test[-15580,]
for (j in 1:nrow(test)) {
fold_errors[j] <- (predict(m1, test[j,])) - test$metastasis[j]
}
cv_errors[i] <- mean(fold_errors ^ 2)
}
test[15580,]
head(test)
test <- test[-32658,]
head(test)
test <- test[-1,]
head(test)
which(test$cancer_type == "Adenocarcinoma In Situ")
set.seed(125)
cv_errors <- rep(0, 10)
df <- d[sample(nrow(d)),]
folds <- cut(seq(1, nrow(df)), breaks = 10, labels = FALSE)
for (i in 1:10) {
# segment data
test_indexes <- which(folds == i, arr.ind = TRUE)
test <- df[test_indexes, ]
train <- df[-test_indexes, ]
# method 1, 2, 3
m1 = lm(metastasis ~ sex + primary_race + ethnicity + age + cancer_type, data = train)
fold_errors <- rep(0, nrow(test))
test <- test[-which(test$cancer_type == "Adenocarcinoma In Situ"),]
View(test)
for (j in 1:nrow(test)) {
fold_errors[j] <- (predict(m1, test[j,])) - test$metastasis[j]
}
cv_errors[i] <- mean(fold_errors ^ 2)
}
set.seed(125)
cv_errors <- rep(0, 10)
df <- d[sample(nrow(d)),]
folds <- cut(seq(1, nrow(df)), breaks = 10, labels = FALSE)
for (i in 1:10) {
# segment data
test_indexes <- which(folds == i, arr.ind = TRUE)
test <- df[test_indexes, ]
train <- df[-test_indexes, ]
# method 1, 2, 3
m1 = lm(metastasis ~ sex + primary_race + ethnicity + age + cancer_type, data = train)
fold_errors <- rep(0, nrow(test))
test <- test[-which(test$cancer_type == "Adenocarcinoma In Situ"),]
for (j in 1:nrow(test)) {
fold_errors[j] <- (predict(m1, test[j,])) - test$metastasis[j]
}
cv_errors[i] <- mean(fold_errors ^ 2)
}
mse_m1 <- mean(cv_errors)
cat("test mse: ", mse_m1)
set.seed(125)
cv_errors <- rep(0, 10)
df <- d[sample(nrow(d)),]
folds <- cut(seq(1, nrow(df)), breaks = 10, labels = FALSE)
for (i in 1:10) {
# segment data
test_indexes <- which(folds == i, arr.ind = TRUE)
test <- df[test_indexes, ]
train <- df[-test_indexes, ]
# method 1, 2, 3
m1 = glm(metastasis ~ sex + primary_race + ethnicity + age + cancer_type, data = train)
fold_errors <- rep(0, nrow(test))
test <- test[-which(test$cancer_type == "Adenocarcinoma In Situ"),]
for (j in 1:nrow(test)) {
fold_errors[j] <- (predict(m1, test[j,])) - test$metastasis[j]
}
cv_errors[i] <- mean(fold_errors ^ 2)
}
mse_m1 <- mean(cv_errors)
cat("test mse: ", mse_m1)
set.seed(125)
cv_errors <- rep(0, 10)
df <- d[sample(nrow(d)),]
folds <- cut(seq(1, nrow(df)), breaks = 10, labels = FALSE)
for (i in 1:10) {
# segment data
test_indexes <- which(folds == i, arr.ind = TRUE)
test <- df[test_indexes, ]
train <- df[-test_indexes, ]
# method 1, 2, 3
m1 = glm(metastasis ~ sex + primary_race + ethnicity + age + cancer_type, data = train)
fold_errors <- rep(0, nrow(test))
test <- test[-which(test$cancer_type == "Adenocarcinoma In Situ"),]
for (j in 1:nrow(test)) {
# fold_errors[j] <- (predict(m1, test[j,])) - test$metastasis[j]
fold_errors[j] <- predict.glm(m1, data.frame(metastasis=test$metastasis[5]),type="resp")
}
cv_errors[i] <- mean(fold_errors ^ 2)
}
set.seed(125)
cv_errors <- rep(0, 10)
df <- d[sample(nrow(d)),]
folds <- cut(seq(1, nrow(df)), breaks = 10, labels = FALSE)
for (i in 1:10) {
# segment data
test_indexes <- which(folds == i, arr.ind = TRUE)
test <- df[test_indexes, ]
train <- df[-test_indexes, ]
# method 1, 2, 3
m1 = glm(metastasis ~ sex + primary_race + ethnicity + age + cancer_type, data = train, family = binomial)
fold_errors <- rep(0, nrow(test))
test <- test[-which(test$cancer_type == "Adenocarcinoma In Situ"),]
for (j in 1:nrow(test)) {
# fold_errors[j] <- (predict(m1, test[j,])) - test$metastasis[j]
predict.glm(m1, data.frame(metastasis=test$metastasis[5]),type="resp")
fold_errors[j] <- predict.glm(m1, data.frame(metastasis=test$metastasis[5]),type="resp")
}
cv_errors[i] <- mean(fold_errors ^ 2)
}
