mse_m1 <- mean(cv_errors ^ 2)
set.seed(10)
cv_errors <- rep(0, 10)
cig <- cig07[sample(nrow(cig07)),]
folds <- cut(seq(1, nrow(cig)), breaks = 10, labels = FALSE)
for (i in 1:10) {
# segment data
test_indexes <- which(folds == i, arr.ind = TRUE)
test <- cig[test_indexes, ]
train <- cig[-test_indexes, ]
m1 <- lm(CO ~ NIC, data = cig[-test_indexes,])
cv_errors[i] <- (predict(m3, cig[test_indexes,])) - cig$CO[i]
#m1 <- lm(CO ~ NIC, data = train)
#cv_errors[i] <- (predict(m1, test)) - test$CO
}
mse_m1 <- mean(cv_errors ^ 2)
set.seed(10)
cv_errors <- rep(0, 10)
cig <- cig07[sample(nrow(cig07)),]
folds <- cut(seq(1, nrow(cig)), breaks = 10, labels = FALSE)
for (i in 1:10) {
# segment data
test_indexes <- which(folds == i, arr.ind = TRUE)
test <- cig[test_indexes, ]
train <- cig[-test_indexes, ]
m1 <- lm(CO ~ NIC, data = cig[-test_indexes,])
cv_errors[i] <- (predict(m3, cig[test_indexes,])) - cig$CO[test_indexes]
#m1 <- lm(CO ~ NIC, data = train)
#cv_errors[i] <- (predict(m1, test)) - test$CO
}
mse_m1 <- mean(cv_errors ^ 2)
set.seed(10)
cv_errors <- rep(0, 10)
cig <- cig07[sample(nrow(cig07)),]
folds <- cut(seq(1, nrow(cig)), breaks = 10, labels = FALSE)
for (i in 1:10) {
# segment data
test_indexes <- which(folds == i, arr.ind = TRUE)
#test <- cig[test_indexes, ]
#train <- cig[-test_indexes, ]
m1 <- lm(CO ~ NIC, data = cig[-test_indexes,])
fold_errors <- rep(0, test_indexes)
for (j in 1:test_indexes) {
fold_errors[j] <- (predict(m1, cig[j,])) - cig$CO[j]
}
cv_errors[i] <- mean(fold_errors ^ 2)
#m1 <- lm(CO ~ NIC, data = train)
#cv_errors[i] <- (predict(m1, test)) - test$CO
}
test_indexes
count(test_indexes)
test_indexes <- which(folds == i, arr.ind = TRUE)
test <- cig[test_indexes, ]
dim(test
)
set.seed(10)
cv_errors <- rep(0, 10)
cig <- cig07[sample(nrow(cig07)),]
folds <- cut(seq(1, nrow(cig)), breaks = 10, labels = FALSE)
for (i in 1:10) {
# segment data
test_indexes <- which(folds == i, arr.ind = TRUE)
test <- cig[test_indexes, ]
train <- cig[-test_indexes, ]
m1 <- lm(CO ~ NIC, data = train)
fold_errors <- rep(0, nrow(train))
for (j in 1:nrow(train)) {
fold_errors[j] <- (predict(m1, cig[j,])) - cig$CO[j]
}
cv_errors[i] <- mean(fold_errors ^ 2)
#m1 <- lm(CO ~ NIC, data = train)
#cv_errors[i] <- (predict(m1, test)) - test$CO
}
mse_m1 <- mean(cv_errors ^ 2)
mse_m1
mse_m1 <- mean(cv_errors)
mse_m1
set.seed(10)
# errors for methods 1, 2 3
cv_errors_1 <- rep(0, 10)
cv_errors_2 <- rep(0, 10)
cv_errors_3 <- rep(0, 10)
cig <- cig07[sample(nrow(cig07)),]
folds <- cut(seq(1, nrow(cig)), breaks = 10, labels = FALSE)
for (i in 1:10) {
# segment data
test_indexes <- which(folds == i, arr.ind = TRUE)
test <- cig[test_indexes, ]
train <- cig[-test_indexes, ]
# train the model with methods 1, 2, 3
m1 <- lm(CO ~ NIC, data = train)
m2 <- lm(CO ~ log(NIC), data = train)
m3 <- lm(CO ~ sqrt(NIC), data = train)
# errors for folds for methods 1, 2, 3
fold_errors_1 <- rep(0, nrow(train))
fold_errors_2 <- rep(0, nrow(train))
fold_errors_3 <- rep(0, nrow(train))
for (j in 1:test_indexes) {
fold_errors_1[j] <- (predict(m1, cig[j, ])) - cig$CO[j]
fold_errors_2[j] <- (predict(m2, cig[j, ])) - cig$CO[j]
fold_errors_3[j] <- (predict(m3, cig[j, ])) - cig$CO[j]
}
cv_errors_1[i] <- mean(fold_errors_1 ^ 2)
cv_errors_2[i] <- mean(fold_errors_2 ^ 2)
cv_errors_3[i] <- mean(fold_errors_3 ^ 2)
}
set.seed(125)
# errors for methods 1, 2 3
cv_errors_1 <- rep(0, 10)
cv_errors_2 <- rep(0, 10)
cv_errors_3 <- rep(0, 10)
cig <- cig07[sample(nrow(cig07)),]
folds <- cut(seq(1, nrow(cig)), breaks = 10, labels = FALSE)
for (i in 1:10) {
# segment data
test_indexes <- which(folds == i, arr.ind = TRUE)
test <- cig[test_indexes, ]
train <- cig[-test_indexes, ]
# train the model with methods 1, 2, 3
m1 <- lm(CO ~ NIC, data = train)
m2 <- lm(CO ~ log(NIC), data = train)
m3 <- lm(CO ~ sqrt(NIC), data = train)
# errors for folds for methods 1, 2, 3
fold_errors_1 <- rep(0, nrow(train))
fold_errors_2 <- rep(0, nrow(train))
fold_errors_3 <- rep(0, nrow(train))
for (j in 1:test_indexes) {
fold_errors_1[j] <- (predict(m1, cig[j, ])) - cig$CO[j]
fold_errors_2[j] <- (predict(m2, cig[j, ])) - cig$CO[j]
fold_errors_3[j] <- (predict(m3, cig[j, ])) - cig$CO[j]
}
cv_errors_1[i] <- mean(fold_errors_1 ^ 2)
cv_errors_2[i] <- mean(fold_errors_2 ^ 2)
cv_errors_3[i] <- mean(fold_errors_3 ^ 2)
}
mse_m1 <- mean(cv_errors_1)
mse_m2 <- mean(cv_errors_2)
mse_m3 <- mean(cv_errors_3)
cat("method 1 test mse: ", mse_m1, "\n")
cat("method 2 test mse: ", mse_m2, "\n")
cat("method 3 test mse: ", mse_m3, "\n")
set.seed(125)
# errors for methods 1, 2 3
cv_errors_1 <- rep(0, 10)
#cv_errors_2 <- rep(0, 10)
#cv_errors_3 <- rep(0, 10)
cig <- cig07[sample(nrow(cig07)),]
folds <- cut(seq(1, nrow(cig)), breaks = 10, labels = FALSE)
for (i in 1:10) {
# segment data
test_indexes <- which(folds == i, arr.ind = TRUE)
test <- cig[test_indexes, ]
train <- cig[-test_indexes, ]
# train the model with methods 1, 2, 3
m1 <- lm(CO ~ NIC, data = train)
#m2 <- lm(CO ~ log(NIC), data = train)
#m3 <- lm(CO ~ sqrt(NIC), data = train)
# errors for folds for methods 1, 2, 3
fold_errors_1 <- rep(0, nrow(train))
#fold_errors_2 <- rep(0, nrow(train))
#fold_errors_3 <- rep(0, nrow(train))
for (j in 1:test_indexes) {
fold_errors_1[j] <- (predict(m1, cig[j, ])) - cig$CO[j]
#fold_errors_2[j] <- (predict(m2, cig[j, ])) - cig$CO[j]
# fold_errors_3[j] <- (predict(m3, cig[j, ])) - cig$CO[j]
}
cv_errors_1[i] <- mean(fold_errors_1 ^ 2)
#cv_errors_2[i] <- mean(fold_errors_2 ^ 2)
# cv_errors_3[i] <- mean(fold_errors_3 ^ 2)
}
mse_m1 <- mean(cv_errors_1)
#mse_m2 <- mean(cv_errors_2)
#mse_m3 <- mean(cv_errors_3)
cat("method 1 test mse: ", mse_m1, "\n")
#cat("method 2 test mse: ", mse_m2, "\n")
#cat("method 3 test mse: ", mse_m3, "\n")
set.seed(125)
# errors for methods 1, 2 3
set.seed(10)
cv_errors <- rep(0, 10)
cig <- cig07[sample(nrow(cig07)),]
folds <- cut(seq(1, nrow(cig)), breaks = 10, labels = FALSE)
for (i in 1:10) {
# segment data
test_indexes <- which(folds == i, arr.ind = TRUE)
test <- cig[test_indexes, ]
train <- cig[-test_indexes, ]
m1 <- lm(CO ~ NIC, data = train)
fold_errors <- rep(0, nrow(train))
for (j in 1:nrow(train)) {
fold_errors[j] <- (predict(m1, cig[j,])) - cig$CO[j]
}
cv_errors[i] <- mean(fold_errors ^ 2)
#m1 <- lm(CO ~ NIC, data = train)
#cv_errors[i] <- (predict(m1, test)) - test$CO
}
mse_m1 <- mean(cv_errors)
cat("method 1 test mse: ", mse_m1, "\n")
#cat("method 2 test mse: ", mse_m2, "\n")
#cat("method 3 test mse: ", mse_m3, "\n")
set.seed(125)
# errors for methods 1, 2 3
set.seed(125)
cv_errors_1 <- rep(0, 10)
cig <- cig07[sample(nrow(cig07)),]
folds <- cut(seq(1, nrow(cig)), breaks = 10, labels = FALSE)
for (i in 1:10) {
# segment data
test_indexes <- which(folds == i, arr.ind = TRUE)
test <- cig[test_indexes, ]
train <- cig[-test_indexes, ]
m1 <- lm(CO ~ NIC, data = train)
fold_errors_1 <- rep(0, nrow(train))
for (j in 1:nrow(train)) {
fold_errors_1[j] <- (predict(m1, cig[j,])) - cig$CO[j]
}
cv_errors_1[i] <- mean(fold_errors_1 ^ 2)
#m1 <- lm(CO ~ NIC, data = train)
#cv_errors[i] <- (predict(m1, test)) - test$CO
}
mse_m1 <- mean(cv_errors_1)
cat("method 1 test mse: ", mse_m1, "\n")
#cat("method 2 test mse: ", mse_m2, "\n")
#cat("method 3 test mse: ", mse_m3, "\n")
cig <- cig07[sample(nrow(
set.seed(125)
# errors for methods 1, 2 3
set.seed(125)
cv_errors_1 <- rep(0, 10)
cv_errors_2 <- rep(0, 10)
cv_errors_3 <- rep(0, 10)
cig <- cig07[sample(nrow(cig07)),]
folds <- cut(seq(1, nrow(cig)), breaks = 10, labels = FALSE)
for (i in 1:10) {
# segment data
test_indexes <- which(folds == i, arr.ind = TRUE)
test <- cig[test_indexes, ]
train <- cig[-test_indexes, ]
m1 <- lm(CO ~ NIC, data = train)
m2 <- lm(CO ~ log(NIC), data = train)
m3 <- lm(CO ~ sqrt(NIC), data = train)
fold_errors_1 <- rep(0, nrow(train))
fold_errors_2 <- rep(0, nrow(train))
fold_errors_3 <- rep(0, nrow(train))
for (j in 1:nrow(train)) {
fold_errors_1[j] <- (predict(m1, cig[j,])) - cig$CO[j]
fold_errors_2[j] <- (predict(m2, cig[j,])) - cig$CO[j]
fold_errors_3[j] <- (predict(m3, cig[j,])) - cig$CO[j]
}
cv_errors_1[i] <- mean(fold_errors_1 ^ 2)
cv_errors_2[i] <- mean(fold_errors_2 ^ 2)
cv_errors_3[i] <- mean(fold_errors_3 ^ 2)
#m1 <- lm(CO ~ NIC, data = train)
#cv_errors[i] <- (predict(m1, test)) - test$CO
}
mse_m1 <- mean(cv_errors_1)
mse_m2 <- mean(cv_errors_2)
mse_m3 <- mean(cv_errors_3)
cat("method 1 test mse: ", mse_m1, "\n")
cat("method 2 test mse: ", mse_m2, "\n")
cat("method 3 test mse: ", mse_m3, "\n")
# methods 1, 2 ,3
cv_errors_1 <- rep(0, n)
cv_errors_2 <- rep(0, n)
cv_errors_3 <- rep(0, n)
for (i in 1:n) {
m1 <- lm(CO ~ NIC, data = cig07[-i,])
cv_errors_1[i] <- (predict(m1, cig07[i,])) - cig07$CO[i]
m2 <- lm(CO ~ log(NIC), data = cig07[-i,])
cv_errors_2[i] <- (predict(m2, cig07[i,])) - cig07$CO[i]
m3 <- lm(CO ~ sqrt(NIC), data = cig07[-i,])
cv_errors_3[i] <- (predict(m3, cig07[i,])) - cig07$CO[i]
}
mse_m1 <- mean(cv_errors_1 ^ 2)
mse_m2 <- mean(cv_errors_2 ^ 2)
mse_m3 <- mean(cv_errors_3 ^ 2)
cat("method 1 test mse: ", mse_m1, "\n")
cat("method 2 test mse: ", mse_m2, "\n")
cat("method 3 test mse: ", mse_m3, "\n")
start = proc.time()
# for methods 1, 2 ,3
cv_errors_1 <- rep(0, n)
cv_errors_2 <- rep(0, n)
cv_errors_3 <- rep(0, n)
for (i in 1:n) {
m1 <- lm(CO ~ NIC, data = cig07[-i,])
cv_errors_1[i] <- (predict(m1, cig07[i,])) - cig07$CO[i]
m2 <- lm(CO ~ log(NIC), data = cig07[-i,])
cv_errors_2[i] <- (predict(m2, cig07[i,])) - cig07$CO[i]
m3 <- lm(CO ~ sqrt(NIC), data = cig07[-i,])
cv_errors_3[i] <- (predict(m3, cig07[i,])) - cig07$CO[i]
}
mse_m1 <- mean(cv_errors_1 ^ 2)
mse_m2 <- mean(cv_errors_2 ^ 2)
mse_m3 <- mean(cv_errors_3 ^ 2)
cat("method 1 test mse: ", mse_m1, "\n",
"method 2 test mse: ", mse_m2, "\n",
"method 3 test mse: ", mse_m3, "\n",
"** processing time: ", proc.time() - start)
proc.time()
?proc.time
start
proc.time()[3]
proc.time()[2,3]
proc.time()[2][3]
start = proc.time()[3]
# for methods 1, 2 ,3
cv_errors_1 <- rep(0, n)
cv_errors_2 <- rep(0, n)
cv_errors_3 <- rep(0, n)
for (i in 1:n) {
m1 <- lm(CO ~ NIC, data = cig07[-i,])
cv_errors_1[i] <- (predict(m1, cig07[i,])) - cig07$CO[i]
m2 <- lm(CO ~ log(NIC), data = cig07[-i,])
cv_errors_2[i] <- (predict(m2, cig07[i,])) - cig07$CO[i]
m3 <- lm(CO ~ sqrt(NIC), data = cig07[-i,])
cv_errors_3[i] <- (predict(m3, cig07[i,])) - cig07$CO[i]
}
mse_m1 <- mean(cv_errors_1 ^ 2)
mse_m2 <- mean(cv_errors_2 ^ 2)
mse_m3 <- mean(cv_errors_3 ^ 2)
cat("method 1 test mse: ", mse_m1,
"\nmethod 2 test mse: ", mse_m2,
"\nmethod 3 test mse: ", mse_m3,
"\n\n** processing time: ", proc.time()[3] - start)
start = proc.time()[3]
set.seed(125)
# errors for methods 1, 2 3
cv_errors_1 <- rep(0, 10)
cv_errors_2 <- rep(0, 10)
cv_errors_3 <- rep(0, 10)
cig <- cig07[sample(nrow(cig07)),]
folds <- cut(seq(1, nrow(cig)), breaks = 10, labels = FALSE)
for (i in 1:10) {
# segment data
test_indexes <- which(folds == i, arr.ind = TRUE)
test <- cig[test_indexes, ]
train <- cig[-test_indexes, ]
# method 1, 2, 3
m1 <- lm(CO ~ NIC, data = train)
m2 <- lm(CO ~ log(NIC), data = train)
m3 <- lm(CO ~ sqrt(NIC), data = train)
fold_errors_1 <- rep(0, nrow(train))
fold_errors_2 <- rep(0, nrow(train))
fold_errors_3 <- rep(0, nrow(train))
for (j in 1:nrow(train)) {
fold_errors_1[j] <- (predict(m1, cig[j,])) - cig$CO[j]
fold_errors_2[j] <- (predict(m2, cig[j,])) - cig$CO[j]
fold_errors_3[j] <- (predict(m3, cig[j,])) - cig$CO[j]
}
cv_errors_1[i] <- mean(fold_errors_1 ^ 2)
cv_errors_2[i] <- mean(fold_errors_2 ^ 2)
cv_errors_3[i] <- mean(fold_errors_3 ^ 2)
}
# MSEs for methods 1, 2, 3
mse_m1 <- mean(cv_errors_1)
mse_m2 <- mean(cv_errors_2)
mse_m3 <- mean(cv_errors_3)
cat("method 1 test mse: ", mse_m1,
"\nmethod 2 test mse: ", mse_m2,
"\nmethod 3 test mse: ", mse_m3,
"\n** processing time: ", proc.time()[3] - start)
start = proc.time()[3]
set.seed(125)
# errors for methods 1, 2 3
cv_errors_1 <- rep(0, 10)
cv_errors_2 <- rep(0, 10)
cv_errors_3 <- rep(0, 10)
cig <- cig07[sample(nrow(cig07)),]
folds <- cut(seq(1, nrow(cig)), breaks = 10, labels = FALSE)
for (i in 1:10) {
# segment data
test_indexes <- which(folds == i, arr.ind = TRUE)
test <- cig[test_indexes, ]
train <- cig[-test_indexes, ]
# method 1, 2, 3
m1 <- lm(CO ~ NIC, data = train)
m2 <- lm(CO ~ log(NIC), data = train)
m3 <- lm(CO ~ sqrt(NIC), data = train)
fold_errors_1 <- rep(0, nrow(train))
fold_errors_2 <- rep(0, nrow(train))
fold_errors_3 <- rep(0, nrow(train))
#for (j in 1:nrow(train)) {
# fold_errors_1[j] <- (predict(m1, cig[j,])) - cig$CO[j]
#fold_errors_2[j] <- (predict(m2, cig[j,])) - cig$CO[j]
#fold_errors_3[j] <- (predict(m3, cig[j,])) - cig$CO[j]
#  }
for (j in 1:nrow(test)) {
fold_errors_1[j] <- (predict(m1, test[j,])) - test$CO[j]
fold_errors_2[j] <- (predict(m2, test[j,])) - test$CO[j]
fold_errors_3[j] <- (predict(m3, test[j,])) - test$CO[j]
}
cv_errors_1[i] <- mean(fold_errors_1 ^ 2)
cv_errors_2[i] <- mean(fold_errors_2 ^ 2)
cv_errors_3[i] <- mean(fold_errors_3 ^ 2)
#cv_errors_1[i] <- mean(((predict(m1, cig[j,])) - cig$CO[j]) ^ 2)
}
# MSEs for methods 1, 2, 3
mse_m1 <- mean(cv_errors_1)
mse_m2 <- mean(cv_errors_2)
mse_m3 <- mean(cv_errors_3)
cat("method 1 test mse: ", mse_m1,
"\nmethod 2 test mse: ", mse_m2,
"\nmethod 3 test mse: ", mse_m3,
"\n** processing time: ", proc.time()[3] - start)
start = proc.time()[3]
set.seed(125)
# errors for methods 1, 2 3
cv_errors_1 <- rep(0, 10)
cv_errors_2 <- rep(0, 10)
cv_errors_3 <- rep(0, 10)
cig <- cig07[sample(nrow(cig07)),]
folds <- cut(seq(1, nrow(cig)), breaks = 10, labels = FALSE)
for (i in 1:10) {
# segment data
test_indexes <- which(folds == i, arr.ind = TRUE)
test <- cig[test_indexes, ]
train <- cig[-test_indexes, ]
# method 1, 2, 3
m1 <- lm(CO ~ NIC, data = train)
m2 <- lm(CO ~ log(NIC), data = train)
m3 <- lm(CO ~ sqrt(NIC), data = train)
fold_errors_1 <- rep(0, nrow(test))
fold_errors_2 <- rep(0, nrow(test))
fold_errors_3 <- rep(0, nrow(test))
#for (j in 1:nrow(train)) {
# fold_errors_1[j] <- (predict(m1, cig[j,])) - cig$CO[j]
#fold_errors_2[j] <- (predict(m2, cig[j,])) - cig$CO[j]
#fold_errors_3[j] <- (predict(m3, cig[j,])) - cig$CO[j]
#  }
for (j in 1:nrow(test)) {
fold_errors_1[j] <- (predict(m1, test[j,])) - test$CO[j]
fold_errors_2[j] <- (predict(m2, test[j,])) - test$CO[j]
fold_errors_3[j] <- (predict(m3, test[j,])) - test$CO[j]
}
cv_errors_1[i] <- mean(fold_errors_1 ^ 2)
cv_errors_2[i] <- mean(fold_errors_2 ^ 2)
cv_errors_3[i] <- mean(fold_errors_3 ^ 2)
#cv_errors_1[i] <- mean(((predict(m1, cig[j,])) - cig$CO[j]) ^ 2)
}
# MSEs for methods 1, 2, 3
mse_m1 <- mean(cv_errors_1)
mse_m2 <- mean(cv_errors_2)
mse_m3 <- mean(cv_errors_3)
cat("method 1 test mse: ", mse_m1,
"\nmethod 2 test mse: ", mse_m2,
"\nmethod 3 test mse: ", mse_m3,
"\n** processing time: ", proc.time()[3] - start)
summary(m1)
summary(m3)
?sample
install.packages("boot")
library(boot)
library(boot)
set.seed(125)
# function to obtain regression weights
bs <- function(formula, data, indices) {
d <- data[indices,] # allows boot to select sample
fit <- lm(formula, data = d)
return(coef(fit))
}
# bootstrapping with 1000 replications
results <- boot(data = cig07, statistic = bs, R = 1000, formula = CO ~ sqrt(NIC))
# view results
results
boot = rep(NA, 1000)
for (i in 1:1000) {
temp = sample(cig07, size = nrow(cig07), replace = TRUE)
boot[i] = coef(lm(CO ~ sqrt(NIC), data = cig07))
}
library(boot)
set.seed(125)
# function to obtain regression weights
bs <- function(formula, data, indices) {
d <- data[indices,] # allows boot to select sample
fit <- lm(formula, data = d)
return(coef(fit))
}
# bootstrapping with 1000 replications
results <- boot(data = cig07, statistic = bs, R = 1000, formula = CO ~ sqrt(NIC))
results
results[,3]
dim(results)
results
for (i in 1:nrow(cig07)) {
se <- (predict(m3, cig07[i, ]) - cig07$CO[i]) ^ 2
}
sqrt(se/999)
for (i in 1:nrow(cig07)) {
se <- se + (predict(m3, cig07[i, ]) - cig07$CO[i]) ^ 2
m <- m + coef(lm(CO ~ sqrt(NIC), data = cig07))
}
se <- 0
m <- 0
for (i in 1:nrow(cig07)) {
se <- se + (predict(m3, cig07[i, ]) - cig07$CO[i]) ^ 2
m <- m + coef(lm(CO ~ sqrt(NIC), data = cig07))
}
sqrt(se/999)
sqrt(m / 999)
se <- 0
m <- 0
for (i in 1:nrow(cig07)) {
se <- se + (predict(m3, cig07[i, ]) - cig07$CO[i]) ^ 2
m <- m + coef(lm(CO ~ sqrt(NIC), data = cig07))[i]
}
sqrt(se/999)
sqrt(m / 999)
?se
?sd
sd(cig07)/999
sqrt(sd(cig07)/999)
